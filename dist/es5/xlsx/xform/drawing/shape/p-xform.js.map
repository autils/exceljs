{"version":3,"file":"p-xform.js","names":["BaseXform","require","RunXform","ParagraphXform","constructor","map","tag","render","xmlStream","paragraph","openNode","alignment","addAttribute","closeNode","runs","forEach","r","parseOpen","node","parser","name","model","attributes","algn","parseText","text","parseClose","push","undefined","module","exports"],"sources":["../../../../../../lib/xlsx/xform/drawing/shape/p-xform.js"],"sourcesContent":["const BaseXform = require('../../base-xform');\nconst RunXform = require('./r-xform');\n\n// DocumentFormat.OpenXml.Drawing.Paragraph\nclass ParagraphXform extends BaseXform {\n  constructor() {\n    super();\n\n    this.map = {\n      'a:r': new RunXform(),\n    };\n  }\n\n  get tag() {\n    return 'a:p';\n  }\n\n  render(xmlStream, paragraph) {\n    xmlStream.openNode('a:p');\n    xmlStream.openNode('a:pPr');\n    if (paragraph.alignment) {\n      xmlStream.addAttribute('algn', paragraph.alignment);\n    }\n    xmlStream.closeNode();\n    paragraph.runs.forEach(r => {\n      this.map['a:r'].render(xmlStream, r);\n    });\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case this.tag:\n        this.model = {runs: []};\n        break;\n      case 'a:pPr':\n        if (node.attributes.algn) {\n          this.model.alignment = node.attributes.algn;\n        }\n        break;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        break;\n    }\n    return true;\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        if (name === 'a:r') {\n          this.model.runs.push(this.parser.model);\n        }\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        return true;\n    }\n  }\n}\n\nmodule.exports = ParagraphXform;\n"],"mappings":";;AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;;AAErC;AACA,MAAME,cAAc,SAASH,SAAS,CAAC;EACrCI,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,GAAG,GAAG;MACT,KAAK,EAAE,IAAIH,QAAQ,CAAC;IACtB,CAAC;EACH;EAEA,IAAII,GAAGA,CAAA,EAAG;IACR,OAAO,KAAK;EACd;EAEAC,MAAMA,CAACC,SAAS,EAAEC,SAAS,EAAE;IAC3BD,SAAS,CAACE,QAAQ,CAAC,KAAK,CAAC;IACzBF,SAAS,CAACE,QAAQ,CAAC,OAAO,CAAC;IAC3B,IAAID,SAAS,CAACE,SAAS,EAAE;MACvBH,SAAS,CAACI,YAAY,CAAC,MAAM,EAAEH,SAAS,CAACE,SAAS,CAAC;IACrD;IACAH,SAAS,CAACK,SAAS,CAAC,CAAC;IACrBJ,SAAS,CAACK,IAAI,CAACC,OAAO,CAACC,CAAC,IAAI;MAC1B,IAAI,CAACX,GAAG,CAAC,KAAK,CAAC,CAACE,MAAM,CAACC,SAAS,EAAEQ,CAAC,CAAC;IACtC,CAAC,CAAC;IACFR,SAAS,CAACK,SAAS,CAAC,CAAC;EACvB;EAEAI,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,IAAI,CAACC,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACF,SAAS,CAACC,IAAI,CAAC;MAC3B,OAAO,IAAI;IACb;IAEA,QAAQA,IAAI,CAACE,IAAI;MACf,KAAK,IAAI,CAACd,GAAG;QACX,IAAI,CAACe,KAAK,GAAG;UAACP,IAAI,EAAE;QAAE,CAAC;QACvB;MACF,KAAK,OAAO;QACV,IAAII,IAAI,CAACI,UAAU,CAACC,IAAI,EAAE;UACxB,IAAI,CAACF,KAAK,CAACV,SAAS,GAAGO,IAAI,CAACI,UAAU,CAACC,IAAI;QAC7C;QACA;MACF;QACE,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACd,GAAG,CAACa,IAAI,CAACE,IAAI,CAAC;QACjC,IAAI,IAAI,CAACD,MAAM,EAAE;UACf,IAAI,CAACA,MAAM,CAACF,SAAS,CAACC,IAAI,CAAC;QAC7B;QACA;IACJ;IACA,OAAO,IAAI;EACb;EAEAM,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,IAAI,CAACN,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACK,SAAS,CAACC,IAAI,CAAC;IAC7B;EACF;EAEAC,UAAUA,CAACN,IAAI,EAAE;IACf,IAAI,IAAI,CAACD,MAAM,EAAE;MACf,IAAI,CAAC,IAAI,CAACA,MAAM,CAACO,UAAU,CAACN,IAAI,CAAC,EAAE;QACjC,IAAIA,IAAI,KAAK,KAAK,EAAE;UAClB,IAAI,CAACC,KAAK,CAACP,IAAI,CAACa,IAAI,CAAC,IAAI,CAACR,MAAM,CAACE,KAAK,CAAC;QACzC;QACA,IAAI,CAACF,MAAM,GAAGS,SAAS;MACzB;MACA,OAAO,IAAI;IACb;IACA,QAAQR,IAAI;MACV,KAAK,IAAI,CAACd,GAAG;QACX,OAAO,KAAK;MACd;QACE,OAAO,IAAI;IACf;EACF;AACF;AAEAuB,MAAM,CAACC,OAAO,GAAG3B,cAAc","ignoreList":[]}