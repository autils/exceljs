{"version":3,"file":"xfrm-xform.js","names":["BaseXform","require","XfrmXform","constructor","map","tag","render","xmlStream","model","openNode","rot","rotation","undefined","flipH","horizontalFlip","flipV","verticalFlip","leafNode","x","y","cx","cy","closeNode","parseOpen","node","parser","name","attributes","parseInt","parseText","parseClose","module","exports"],"sources":["../../../../../lib/xlsx/xform/drawing/xfrm-xform.js"],"sourcesContent":["const BaseXform = require('../base-xform');\n\n// DocumentFormat.OpenXml.Drawing.Transform2D\nclass XfrmXform extends BaseXform {\n  constructor() {\n    super();\n    this.map = {};\n  }\n\n  get tag() {\n    return 'a:xfrm';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      rot: model.rotation ? model.rotation * 60000 : undefined,\n      flipH: model.horizontalFlip ? '1' : undefined,\n      flipV: model.verticalFlip ? '1' : undefined,\n    });\n    xmlStream.leafNode('a:off', {x: 0, y: 0});\n    xmlStream.leafNode('a:ext', {cx: 0, cy: 0});\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.model = {\n          rotation: node.attributes.rot ? parseInt(node.attributes.rot, 10) / 60000 : undefined,\n          horizontalFlip: node.attributes.flipH ? node.attributes.flipH === '1' : undefined,\n          verticalFlip: node.attributes.flipV ? node.attributes.flipV === '1' : undefined,\n        };\n        break;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        break;\n    }\n    return true;\n  }\n\n  parseText() {}\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        return true;\n    }\n  }\n}\n\nmodule.exports = XfrmXform;\n"],"mappings":";;AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE1C;AACA,MAAMC,SAAS,SAASF,SAAS,CAAC;EAChCG,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,GAAG,GAAG,CAAC,CAAC;EACf;EAEA,IAAIC,GAAGA,CAAA,EAAG;IACR,OAAO,QAAQ;EACjB;EAEAC,MAAMA,CAACC,SAAS,EAAEC,KAAK,EAAE;IACvBD,SAAS,CAACE,QAAQ,CAAC,IAAI,CAACJ,GAAG,EAAE;MAC3BK,GAAG,EAAEF,KAAK,CAACG,QAAQ,GAAGH,KAAK,CAACG,QAAQ,GAAG,KAAK,GAAGC,SAAS;MACxDC,KAAK,EAAEL,KAAK,CAACM,cAAc,GAAG,GAAG,GAAGF,SAAS;MAC7CG,KAAK,EAAEP,KAAK,CAACQ,YAAY,GAAG,GAAG,GAAGJ;IACpC,CAAC,CAAC;IACFL,SAAS,CAACU,QAAQ,CAAC,OAAO,EAAE;MAACC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAC,CAAC;IACzCZ,SAAS,CAACU,QAAQ,CAAC,OAAO,EAAE;MAACG,EAAE,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAC,CAAC,CAAC;IAC3Cd,SAAS,CAACe,SAAS,CAAC,CAAC;EACvB;EAEAC,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,IAAI,CAACC,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACF,SAAS,CAACC,IAAI,CAAC;MAC3B,OAAO,IAAI;IACb;IACA,QAAQA,IAAI,CAACE,IAAI;MACf,KAAK,IAAI,CAACrB,GAAG;QACX,IAAI,CAACG,KAAK,GAAG;UACXG,QAAQ,EAAEa,IAAI,CAACG,UAAU,CAACjB,GAAG,GAAGkB,QAAQ,CAACJ,IAAI,CAACG,UAAU,CAACjB,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,GAAGE,SAAS;UACrFE,cAAc,EAAEU,IAAI,CAACG,UAAU,CAACd,KAAK,GAAGW,IAAI,CAACG,UAAU,CAACd,KAAK,KAAK,GAAG,GAAGD,SAAS;UACjFI,YAAY,EAAEQ,IAAI,CAACG,UAAU,CAACZ,KAAK,GAAGS,IAAI,CAACG,UAAU,CAACZ,KAAK,KAAK,GAAG,GAAGH;QACxE,CAAC;QACD;MACF;QACE,IAAI,CAACa,MAAM,GAAG,IAAI,CAACrB,GAAG,CAACoB,IAAI,CAACE,IAAI,CAAC;QACjC,IAAI,IAAI,CAACD,MAAM,EAAE;UACf,IAAI,CAACA,MAAM,CAACF,SAAS,CAACC,IAAI,CAAC;QAC7B;QACA;IACJ;IACA,OAAO,IAAI;EACb;EAEAK,SAASA,CAAA,EAAG,CAAC;EAEbC,UAAUA,CAACJ,IAAI,EAAE;IACf,IAAI,IAAI,CAACD,MAAM,EAAE;MACf,IAAI,CAAC,IAAI,CAACA,MAAM,CAACK,UAAU,CAACJ,IAAI,CAAC,EAAE;QACjC,IAAI,CAACD,MAAM,GAAGb,SAAS;MACzB;MACA,OAAO,IAAI;IACb;IACA,QAAQc,IAAI;MACV,KAAK,IAAI,CAACrB,GAAG;QACX,OAAO,KAAK;MACd;QACE,OAAO,IAAI;IACf;EACF;AACF;AAEA0B,MAAM,CAACC,OAAO,GAAG9B,SAAS","ignoreList":[]}